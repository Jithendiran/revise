{
	"nodes":[
		{"id":"e702c7ba6da78052","type":"group","x":-2080,"y":840,"width":2170,"height":1712,"label":"Add Device"},
		{"id":"e836107862f86207","x":305,"y":1009,"width":1044,"height":931,"type":"group","label":"Device remove"},
		{"id":"c87fe3504c8c2d72","x":-2080,"y":-200,"width":1277,"height":593,"type":"group","label":"Driver add"},
		{"id":"9da862d6f0222e3c","x":-260,"y":-86,"width":1260,"height":306,"type":"group","label":"Driver remove"},
		{"id":"e67e9246cd44dc0e","type":"text","text":"**PCI core** looking for new device in PCI bus","x":-920,"y":1170,"width":250,"height":60},
		{"id":"30ddc6eb20aeba2d","type":"text","text":"Device register process will initilize some values like kobject, update this device parent's child list with this device\n\n`device->parent->child = [..., this_device]`\n\nhotplug event is generated\n\nThis device is added to bus_specific device list\n\n`pci_bus_type->devices = [..., this_device]`. This is necessary for `match function call`","x":-1400,"y":1622,"width":440,"height":318},
		{"id":"6b905dfcac0776c8","type":"text","text":"Device driver pointer is updated with matched driver. Then **Driver core**\nwill call the driver's *probe* function \n\n`device->driver = matched_driver`","x":-920,"y":2100,"width":400,"height":140},
		{"id":"f735d8894aa2789d","type":"text","text":"pci_bus_type `match` function called by **Driver core**\n\nMatch function will validate added device with all driver","x":-725,"y":1535,"width":361,"height":175},
		{"id":"b27e63bbb5a4f860","type":"text","text":"Success","x":-850,"y":1824,"width":250,"height":60,"color":"4"},
		{"id":"764e8b10873c227a","type":"text","text":"Success","x":-1349,"y":2143,"width":250,"height":60,"color":"4"},
		{"id":"728119ac55603123","type":"text","text":"Failed","x":-180,"y":1753,"width":250,"height":60,"color":"1"},
		{"id":"b6318ca226c3b99c","type":"text","text":"Update Driver's managing device list with the new device.\n\nCreate symlink form the driver directory to the controlling device in device direcory","x":-1400,"y":2360,"width":351,"height":172},
		{"id":"f7eff21ce13e360f","type":"text","text":"Driver registration process, It is Initilize by **PCI Core** Driver's bus type is pointed to the PCI bus\n\nIt's *Probe* and *remove* function points to function with in the **PCI core**\n\ndriver ready to server\n","x":-1040,"y":860,"width":440,"height":200},
		{"id":"e13e273f06f90377","type":"text","text":"sysfs directory creation for PCI in `/sys/bus/pci_bus`","x":-1500,"y":1110,"width":320,"height":60},
		{"id":"e705b95709cb32ca","type":"text","text":"Expose *match*  function to PCI core","x":-1500,"y":1240,"width":320,"height":60},
		{"id":"c16b7b62a0ff90ed","type":"text","text":"PCI Bus  type register","x":-2000,"y":900,"width":250,"height":60},
		{"id":"1f979bfeec686447","type":"text","text":"PCI core will create memory for new device and initilize bus specific fields and Device parent pointer is pointing to the PCI bus. \n\nCall device register","x":-2060,"y":1491,"width":370,"height":262},
		{"id":"5e2fde2f5af6685d","x":398,"y":1029,"width":582,"height":231,"type":"text","text":"There is a fake PCI Hotplug driver it allow the developer to test the their PCI driver handle their removal device properly. This module is fakephp\n\nEffort of PCI core to remove device is less comparing to add\nWhen device is remove particular device host or controller's remove method is called in our case This is PCI Device"},
		{"id":"68128ce12b578c58","x":325,"y":1438,"width":455,"height":82,"type":"text","text":"`pci_remove_bus_device`. This function do the PCI specific clean up    "},
		{"id":"6d133f79f480f37e","x":980,"y":1442,"width":349,"height":238,"type":"text","text":"`device_unregister` from struct device\n\nThis clean the sysfs related files, kobject delete, clear it's reference from parent, calls the hotplug event"},
		{"id":"4f305f5da3148d17","x":498,"y":1788,"width":382,"height":132,"type":"text","text":"If the device reference is one, then it will call `release` frunction from struct device"},
		{"id":"e84ce609868989d4","x":1018,"y":1053,"width":250,"height":60,"type":"text","text":"Every call is made by **PCI core**"},
		{"id":"591923263e51e9ff","x":-1163,"y":-153,"width":340,"height":106,"type":"text","text":"`driver_register` function  is called with `device_driver` obj"},
		{"id":"ea3843462d588c8b","x":-1896,"y":116,"width":250,"height":60,"type":"text","text":"Every call is made by **PCI core**"},
		{"id":"37bf6766bdd6449b","x":-1357,"y":117,"width":534,"height":236,"type":"text","text":"`bus_add_driver` this is called.\n\n* This looks for the bus associated with driver, if not found return immediately\n* Driver's sysfs related are created\n* Then lock is grabbed and check with match function when a new device is added"},
		{"id":"4fd35f794a8b95b4","x":-2060,"y":-153,"width":537,"height":153,"type":"text","text":"A driver is added to the PCI core when `pci_register_driver` function is called. It init `struct device_driver` obj"},
		{"id":"e459dbc70d8da224","x":471,"y":-66,"width":509,"height":266,"type":"text","text":"`driver_unregister` is called with `struct device_driver`\n\n* This cleans the sysfs related files\n* It then iterate over the devices that attached to it and call device's `release` function\n* Driver removal code needs to wait till it's reference count is drops to 0"},
		{"id":"085caf46ba743877","x":-240,"y":28,"width":344,"height":79,"type":"text","text":"**Driver core** calls the  `pci_unregister_device` functoin"}
	],
	"edges":[
		{"id":"442a13c40e29d623","fromNode":"c16b7b62a0ff90ed","fromSide":"right","toNode":"e13e273f06f90377","toSide":"left","color":"6","label":"Registr process"},
		{"id":"34c9aa85c6a49dbc","fromNode":"c16b7b62a0ff90ed","fromSide":"right","toNode":"e705b95709cb32ca","toSide":"left","color":"6","label":"Registr process"},
		{"id":"f8f6e6c8a5ba9d25","fromNode":"e13e273f06f90377","fromSide":"right","toNode":"e67e9246cd44dc0e","toSide":"left","label":"Register complete"},
		{"id":"e7e44b75ea945ba2","fromNode":"e705b95709cb32ca","fromSide":"right","toNode":"e67e9246cd44dc0e","toSide":"left","label":"Register complete"},
		{"id":"70f7109b4269b650","fromNode":"e67e9246cd44dc0e","fromSide":"bottom","toNode":"1f979bfeec686447","toSide":"top","color":"2","label":"New device found"},
		{"id":"f3ea06c2c2fb09d5","fromNode":"1f979bfeec686447","fromSide":"right","toNode":"30ddc6eb20aeba2d","toSide":"left","color":"6","label":"Registr to Driver core"},
		{"id":"196e11f8603c5788","fromNode":"30ddc6eb20aeba2d","fromSide":"right","toNode":"f735d8894aa2789d","toSide":"left","label":"match"},
		{"id":"00fca5f22ccd9241","fromNode":"f735d8894aa2789d","fromSide":"right","toNode":"728119ac55603123","toSide":"left","color":"1"},
		{"id":"e7552d6d81176c77","fromNode":"728119ac55603123","fromSide":"top","toNode":"f735d8894aa2789d","toSide":"top"},
		{"id":"a6c0f56d48982bfa","fromNode":"f7eff21ce13e360f","fromSide":"right","toNode":"f735d8894aa2789d","toSide":"top","color":"6"},
		{"id":"5f17201a42d5a00b","fromNode":"b27e63bbb5a4f860","fromSide":"bottom","toNode":"6b905dfcac0776c8","toSide":"top"},
		{"id":"7058bb749949d5e2","fromNode":"6b905dfcac0776c8","fromSide":"left","toNode":"764e8b10873c227a","toSide":"right","color":"4"},
		{"id":"944e90bd108822b1","fromNode":"6b905dfcac0776c8","fromSide":"right","toNode":"728119ac55603123","toSide":"bottom","color":"1"},
		{"id":"ec33d9f5ba978018","fromNode":"764e8b10873c227a","fromSide":"bottom","toNode":"b6318ca226c3b99c","toSide":"top"},
		{"id":"53b4520735f38412","fromNode":"e705b95709cb32ca","fromSide":"right","toNode":"f735d8894aa2789d","toSide":"top"},
		{"id":"f811374519a30c49","fromNode":"f735d8894aa2789d","fromSide":"bottom","toNode":"b27e63bbb5a4f860","toSide":"top"},
		{"id":"28fb7e1ade2fad4c","fromNode":"5e2fde2f5af6685d","fromSide":"bottom","toNode":"68128ce12b578c58","toSide":"top","label":"PCI Core call's"},
		{"id":"4c8cbc5e642603d7","fromNode":"68128ce12b578c58","fromSide":"right","toNode":"6d133f79f480f37e","toSide":"left"},
		{"id":"7b23e5bd230d41d8","fromNode":"6d133f79f480f37e","fromSide":"bottom","toNode":"4f305f5da3148d17","toSide":"top"},
		{"id":"9113f6135fccb697","fromNode":"4fd35f794a8b95b4","fromSide":"right","toNode":"591923263e51e9ff","toSide":"left","label":"PCI core call's"},
		{"id":"c9ed917ec4c356ad","fromNode":"591923263e51e9ff","fromSide":"bottom","toNode":"37bf6766bdd6449b","toSide":"top"},
		{"id":"e27d9ee5e84799b9","fromNode":"37bf6766bdd6449b","fromSide":"right","toNode":"f735d8894aa2789d","toSide":"top","color":"3"},
		{"id":"16591bea67dee929","fromNode":"085caf46ba743877","fromSide":"right","toNode":"e459dbc70d8da224","toSide":"left","label":"Driver core call's"},
		{"id":"4fbe5f144f88567a","fromNode":"e459dbc70d8da224","fromSide":"right","toNode":"4f305f5da3148d17","toSide":"top","color":"5"}
	]
}