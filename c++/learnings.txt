Start with C

basic
    1. basic_01.cpp
    2. access_specifier.cpp
    3. basic_02.cpp
    4. struct.cpp
    5. static.cpp
    6. this.cpp
    7. constructor.cpp
    8. enum.cpp
    9. reference.cpp
    10. constexpr.cpp

intermidiate
    1.nestedclass.cpp
    2. friend.cpp
    3. type.cpp
    4. exception.cpp
    
inheritance
    1. intro.txt
    2. single_inh.cpp
    3. multilevel.cpp
    4. multiple.cpp

advanced
    1. pointers.cpp
    2. templates.cpp

see concepts/sharedlib/intro.txt


Linker
-------------
A linker in C++ (and most compiled languages) is a tool that combines multiple object files into a single executable.
Linking (.o + libraries -> executable)

```
// main.cpp
extern void hello();
int main() { hello(); }

// hello.cpp
#include <iostream>
void hello() { std::cout << "Hello\n"; }
```

1. Each is compiled separately into .o files.
2. The linker connects main() to hello().
3. Handles relocations and address patching, Updates memory addresses so function calls go to the correct locations.


// file1.cpp
int global = 42;
void print();
int main() {
    print();
    return global;
}

// file2.cpp
#include <iostream>
extern int global;
void print() {
    std::cout << global << "\n";
}

g++ -c file1.cpp  # → file1.o
g++ -c file2.cpp  # → file2.o

When compiling file2.cpp, the compiler sees: extern int global; // we don't know its address yet!
So in file2.o, it leaves a placeholder in the instructions saying: “Please insert the address of global here later.”
This is called a relocation entry.


[ file1.o ]                [ file2.o ]
-------------             -------------------
| main()     |            | print()          |
| calls print|            | uses 'global'    |
-------------             -------------------
      \                          /
       \________________________/
                |
                V
         [ Linker starts ]
                |
                |
       ----------------------------------------
       |  1. Combines both object files       |
       |  2. Creates a symbol table           |
       |     global → 0x1000                  |
       |     print  → 0x2000                  |
       ----------------------------------------
                |
                |
    Updates all code that says "where is global?"
    ➜ Replaces it with actual address 0x1000

------------------------------------------------------------------------------------------------------------------
STL (Standard Template Library) - vector, map, set, unordered_map, etc.

6. Move Semantics & Advanced Memory Management
Move constructor and move assignment

std::move and std::forward

RAII (Resource Acquisition Is Initialization)

Memory management techniques (allocators, new vs malloc)

7. Multithreading & Concurrency
std::thread, std::mutex, std::lock_guard

Condition variables and atomic operations

Thread synchronization and race conditions

8. Modern C++ Features (C++11, C++14, C++17, C++20)
Lambda functions

std::optional, std::variant, std::any

constexpr, std::tuple

Ranges and coroutines (C++20)


Variables, Data Types, Operators
Control Flow (if, switch, loops)
Functions & Parameter Passing
===============================================================

Memory Management (Key Differentiator from Java/Python)
-----------------------------------------------
Pointers & References
new and delete (Manual Memory Management)
Smart Pointers (unique_ptr, shared_ptr)
===================================================================

Object-Oriented Programming (OOP in C++ Style)
-----------------------------------------------------------------
Classes & Objects
Constructors, Destructors
Inheritance & Polymorphism
Virtual Functions & Vtable
Abstract Classes & Interfaces
============================================================

STL (Standard Template Library) - Saves Time!
----------------------------------------------------------
Vectors (std::vector)
Maps (std::map, std::unordered_map)
Strings (std::string)
Iterators & Algorithms (std::sort, std::find, std::for_each)
=============================================================

RAII & Resource Management
-------------------------------------
Constructor-Destructor Pattern
Exception Safety with RAII
=======================================================

Multithreading (If Needed for Work)
-----------------------------------------
std::thread
Mutex & Locking (std::mutex, std::lock_guard)
Condition Variables (std::condition_variable)
======================================================

Learn Later (Optional, Based on Work Needs)
----------------------------------------------
Templates (Beyond STL usage)
Move Semantics & Rvalue References
Lambdas & Functional Programming
Advanced Memory Management (Placement New, Custom Allocators)
Low-Level Optimization