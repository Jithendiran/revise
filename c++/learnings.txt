Start with C

basic
    1. basic_01.cpp
    2. access_specifier.cpp
    3. basic_02.cpp
    4. struct.cpp
    5. static.cpp
    6. this.cpp
    7. constructor.cpp
    8. enum.cpp
    9. reference.cpp
    10. constexpr.cpp

intermidiate
    1.nestedclass.cpp
    2. friend.cpp
    3. type.cpp
    4. exception.cpp
    
inheritance
    1. intro.txt
    2. single_inh.cpp
    3. multilevel.cpp
    4. multiple.cpp

Syntax & Basics (Skip if familiar with C)
-----------------------------------------------

1. Inheritance
Basics of inheritance (public, private, protected)

Constructor and destructor behavior in inheritance

Multiple inheritance and diamond problem

Virtual base classes

2. Polymorphism
Function overloading vs. function overriding

Virtual functions and runtime polymorphism

Abstract classes and pure virtual functions

Virtual table (vtable) and virtual pointer (vptr) mechanism

3. Exception Handling
try, catch, throw

Standard exceptions (std::exception, std::runtime_error, etc.)

Custom exception classes

noexcept keyword

4. Smart Pointers
std::unique_ptr

std::shared_ptr

std::weak_ptr

How smart pointers manage memory

5. Templates & STL
Function templates and class templates

Variadic templates

STL (Standard Template Library) - vector, map, set, unordered_map, etc.

6. Move Semantics & Advanced Memory Management
Move constructor and move assignment

std::move and std::forward

RAII (Resource Acquisition Is Initialization)

Memory management techniques (allocators, new vs malloc)

7. Multithreading & Concurrency
std::thread, std::mutex, std::lock_guard

Condition variables and atomic operations

Thread synchronization and race conditions

8. Modern C++ Features (C++11, C++14, C++17, C++20)
Lambda functions

std::optional, std::variant, std::any

constexpr, std::tuple

Ranges and coroutines (C++20)


Variables, Data Types, Operators
Control Flow (if, switch, loops)
Functions & Parameter Passing
===============================================================

Memory Management (Key Differentiator from Java/Python)
-----------------------------------------------
Pointers & References
new and delete (Manual Memory Management)
Smart Pointers (unique_ptr, shared_ptr)
===================================================================

Object-Oriented Programming (OOP in C++ Style)
-----------------------------------------------------------------
Classes & Objects
Constructors, Destructors
Inheritance & Polymorphism
Virtual Functions & Vtable
Abstract Classes & Interfaces
============================================================

STL (Standard Template Library) - Saves Time!
----------------------------------------------------------
Vectors (std::vector)
Maps (std::map, std::unordered_map)
Strings (std::string)
Iterators & Algorithms (std::sort, std::find, std::for_each)
=============================================================

RAII & Resource Management
-------------------------------------
Constructor-Destructor Pattern
Exception Safety with RAII
=======================================================

Multithreading (If Needed for Work)
-----------------------------------------
std::thread
Mutex & Locking (std::mutex, std::lock_guard)
Condition Variables (std::condition_variable)
======================================================

Learn Later (Optional, Based on Work Needs)
----------------------------------------------
Templates (Beyond STL usage)
Move Semantics & Rvalue References
Lambdas & Functional Programming
Advanced Memory Management (Placement New, Custom Allocators)
Low-Level Optimization