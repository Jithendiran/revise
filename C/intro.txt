# is preprocessor

file name end with .h is header file it will only include function declaration not definition

#include<stdio.h> means copy paste the file content of stdio.h to that line

copy paste is the job of preprocessor

Linker is going to map the functions from c standard library

1.type
    int
    float
    char
    const
    scope
    operator
    bitwise
    typecast
    memalign
2.IO
    printf
    scanf
3. enum
4. function
    function
5. preprocessor
6. pointer
    intro
    callByReference
    void_pointer
    array
    2d
    airthmetic
    const
    function_pointer
    dynamic_memory
7. array
    intro
    array
    wholearraypointer
    arrayofpointers
    string
8. extern
    var_modifier
9. static
    scope_of_var.c
    static.c 
    static2.c
    Basic.md
    scope
10. structure
    structure
    typedef
    pointer
11. union
12. function
     inline
     variable length arguments
13. pthread
14. volatile
15. __THROW
16. __attribute(())__
17. c program execution order

Memory segments of c (Not only for c, this is how a process see the space, it is depend on OS, Compiler, Language)

    Each process assume that one process is only running on the system, Process are managed by OS
Text/code
    size can't change 
    compiled code store (bin file). It is read only section. It is in lower section. 
    This section can be shared between multiple process. Process means any running program is called process 

Data
    Size is calculated by compiler
    It is divide into two
    * UnInitialized
            It contains global & staticvariables that are not initialized
            Life time is through out the program

    * Initialized
            It contains global & static variables that are explictly initialized
            Life time is through out the program
            Variable can be changed if non constant

Heap
    Dynamic memory
    size can vary in running

Stack
    auto, register, functions are store in stack
    life time until function execution
    size can vary in running

Environment
    env values and command line arguments



C is heavly depend on the compiler, basically function overloading will not support in normal c compiler 
but if we use g++ compiler to compile c program it will support function overloading

C Program execution

a.c -> preprocessor -> Compiler -> assembler -> linker -> loader

* preprocessor outputs expanded source code it's file extension is ".i", a.c -> a.i
    // execute gcc -E a.c

* compiler will check for syntax error and produce assembly file with extension of ".asm", a.i -> a.asm. or it may end with ".s"
    // execute gcc -S a.c

* assembler will generate object code with extension ".obj", a.asm -> a.obj. or it may end with ".o"
    // execute gcc -c a.c

* linker will link the system library. it will include definition of predefined functions and outputs executable file ".out" or ".exe", a.obj -> a.out or a.obj -> a.exe
    // execute gcc a.c

* loader will load the executable code to ram

Reference : https://www.youtube.com/playlist?list=PLBlnK6fEyqRggZZgYpPMUxdY1CYkZtARR