Using x86-64 assembly language
This is using nasm assembler
sudo apt install nasm
https://www.youtube.com/playlist?list=PLetF-YjXm-sCH6FrTz4AQhfH6INDQvQSn
https://www.youtube.com/playlist?list=PL2EF13wm-hWCoj6tUBGUmrkJmH1972dBB
https://www.tutorialspoint.com/assembly_programming/index.htm


; -> is comment

Registers 
    Registers are part of processor that temporarily holds memory
    in the x86_64 architecture, register holds 64 bits.

    This mean each register can hold the values:
    Unsingned: 0 to 18446744073709551615
    signed: -9,223,372,036,854,775,808   to  9,223,372,036,854,775,807

    view registers.png

System call
    A system call, or a syscall. is when a program request a service from the kernel.
    system calls will differ by operating system
    All syscall have an ID associated with them (a number).
    Syscalls also takes arguments, meaning, a list of inputs.

    system calls input by register
    Arguments               Registers
    ID                      rax
    1                       rdi
    2                       rsi
    3                       rdx
    4                       r10
    5                       r8
    6                       r9    

    rax will store sys_call ID, this will indicate which syscall going to call
    from rdi to r9 will tahe arguments  

    refer the site for more reference
    https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#x86_64-64_bit

Sections
    There are 3 sections in x86_64, They are .data, .bss, .text section

    The data section is where all data is defined before compilation
    The data section is used for declaring initialized data. 

    The bss(block starting symbol) section is where data is allocated for future use.
    The text section is used for keeping the actual code.
    bss sections values are filled with 0 

    The text section is where the actual code goes
    This section must begin with the declaration global _start, which tells the kernel where the program execution begins.

    segment and section word is equalent

    Data segment − It is represented by .data section and the .bss. The .data section is used to declare the memory region, where data elements are stored for the program. This section cannot be expanded after the data elements are declared, and it remains static throughout the program.
    The .bss section is also a static memory section that contains buffers for data to be declared later in the program. This buffer memory is zero-filled.

    Code segment − It is represented by .text section. This defines an area in memory that stores the instruction codes. This is also a fixed area.

    Stack − This segment contains data values passed to functions and procedures within the program.

labels
    A label is used to label the part of code, after compilation the name of the label will replace by location
    the start label is essential for all programs
    when your program is compiled and later executed, it is executed first at the location if _start

    if the linker cannot find _start, it will throw error

global
    global is used when you want the linker to be able to know the address of some label

    the object file generated will contain a link to every label declared global

Flags
    Flags, like registers, hold data.
    Flags only hold 1 bit each. They are either true or false.
    Individual falags are part of a larger register.

    https://en.wikipedia.org/wiki/FLAGS_register

Pointers
    Pointers are also registers that hold data.
    They store address, that address will have data

    eg:
    Pointer name    meaning             Desc
    rip             Index pointer       Points to next address to be executed in the control flow.
    rsp             Stack pointer       Points to the top address of the Stack
    rbp             Stack base pointer  Points to the bottom of the stack
    .....(more)

    control flow of program is control by rip. it executes from _start in the flow of top to bottom

Data length
    There are some defined data length in asm

    DB  ->  Define Byte         ; 1 byte
    DW  ->  Define Word         ; 2 bytes
    DD  ->  Define Doubleword   ; 4 bytes
    DQ  ->  Define Quadword     ; 8 bytes
    DT  ->  Define Ten Bytes    ; 10 bytes

    ref: https://www.tortall.net/projects/yasm/manual/html/nasm-pseudop.html


Intel, x86 follows little endian encoding
values are stored from lower order to higher order (right to left)
if 1,2,3,4 is to be stored in memory it is stored like 0x04030201

Instructions
    https://www.nasm.us/xdoc/2.15.05/html/nasmdocb.html

Ref: 
https://www.nasm.us/xdoc/2.15.05/html/nasmdoca.html
http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html
https://www.cs.virginia.edu/~evans/cs216/guides/x86.html
https://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html
https://en.wikipedia.org/wiki/X86_assembly_language


https://www.youtube.com/watch?v=dDwXnB6XeiA
https://www.youtube.com/watch?v=rW_NV6rf0rM

Todo
    global in asm
    linker how it is work
    addressing, scale address
    stack
    bss vs data vs text
    object dump
    virtual memory in objdump
    register byte allocation
    c function to asm
    c local var, global var, stativ var see in asm
    c see static function and it's var in asm
    complete flow of fetch, decode, execute

    https://www.youtube.com/playlist?list=PL2EF13wm-hWCoj6tUBGUmrkJmH1972dBB